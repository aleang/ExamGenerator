/**
 * TestGenerator will consume questions from text files and 
 * generate a formatted HTML document containing randomised
 * questions and answer options. 
 * @author Pheng Taing
 * @version 2015_05_16
 * @see bit.ly/pixport
 */

package examgenerator;
import static java.lang.System.out;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JProgressBar;

public class TestGenerator extends JFrame {
    public static ArrayList<Character> answerSheet = new ArrayList<Character>();
    public static int staticQuestionNumber;
    
    String examName;
    int versionNumber;
    boolean randomiseQuestionOrder;
    TestSection[] sections;
    PrintWriter printer;
    File examFiles[], outputDirectory;
    JProgressBar jpBar;
            
    public TestGenerator() {
        examName = "Test";
        versionNumber = 1;
    }

    
    public void generateTest() {

        // Step 1: Set up printer to write files to
        printer = setUpPrinter();
        
        // Step 2: Set up HTML document
        prepareHTMLFile(printer);
        
        // Step 3: Create sections with questions
        createQuestionsAndRandomise();

        // Step 4: Print out sections to HTML document
        staticQuestionNumber = 1;
        for (TestSection sec: sections){
            sec.print(this);
        }
        printer.flush();
        printer.close();
        
        // Step 5: Print out answers!
        printAnswer();
    }
    
    private void createQuestionsAndRandomise() {
        sections = new TestSection[examFiles.length];
        answerSheet.clear();
        try {
            for (int i = 0; i < examFiles.length; i++) {
                sections[i] = new TestSection(examFiles[i], randomiseQuestionOrder);
                jpBar.setValue((int)(i * 50.0 /examFiles.length));
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        
    }
    
    private void printAnswer() {
        String outputFile = String.format("%s/%s-version-%d-solution.txt", outputDirectory.getAbsolutePath(), examName, versionNumber);
        PrintWriter printedFile;
        try {
            printedFile = new PrintWriter(new File(outputFile));
            printedFile.println(String.format("%s-version-%d-solutions", examName, versionNumber));
            int numberOfQs = answerSheet.size();
            
            for (int i = 1; ! answerSheet.isEmpty(); i++){
                char optCode = answerSheet.remove(0);
                int spaces = (optCode - 'A')*4 + 1;
                printedFile.printf("%3d: %"+spaces+"s\n", i, optCode+"");
                if (i % 5 == 0) printedFile.println();
                jpBar.setValue(50+(int)(i * 50.0 /numberOfQs));
            }
            jpBar.setValue(100);
            printedFile.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        
        outputFile = String.format("%s/style.css", outputDirectory.getAbsolutePath());
        try {
            printedFile = new PrintWriter(new File(outputFile));
            printedFile.println("/* Styles generated by Pheng Taing 2015 */\n");
            printedFile.println("body {font-family : 'Segoe UI', sans-serif; }");
            printedFile.println("h1 {page-break-before: always;}");
            printedFile.println("h1:first-of-type {page-break-before: avoid;}");
            printedFile.println(".questionNumber {\n" +
                "font-weight: bold;\n" +
                "display: block;\n" +
                "margin: 2em 0 0 0;\n" +
                "}");
            printedFile.println(".questionTitle {\n" +
                "display: block;\n" +
                "margin: 0 0 5 0;\n" +
                "}");
            printedFile.println("td {padding-right: 1em;}");
            printedFile.println("pre {\n" +
                "font-family: Consolas,Menlo,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New,monospace,serif;\n" +
                "margin: 10px 0 10px 10px;\n" +
                "overflow: auto;\n" +
                "width: auto;\n" +
                "display: block;\n" +
                "color: #555;\n" +
                "}");
            printedFile.println("div {page-break-inside:avoid;}");
            printedFile.println("pre.l {\n" +
                "display: inline;\n" +
                "padding: 3px;\n" +
                "margin: 0;\n" +
                "}");
            printedFile.flush();
            printedFile.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * setUpPrinter() will create a print writer that writes
     * to a file that has a name based on exam name and version number
     * @return
     */
    private PrintWriter setUpPrinter() {
        String outputFile = String.format("%s/%s-version-%d.html", outputDirectory.getAbsolutePath(), examName, versionNumber);
        try {
            FileWriter fw = new FileWriter(outputFile, false);
            return new PrintWriter(fw);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * prepareHTMLFile() set up the HTML document with HTML5
     * @param outputFile PrintWriter object to print with
     */
    private void prepareHTMLFile(PrintWriter pw) {
        print("<!DOCTYPE html><html><head>");
        print("<link rel='stylesheet' href='style.css' type='text/css' />");
        print("</head><body>");
    }
    
    // Setters
    public void setTestVersionNumber(int i) { versionNumber = i; }
    public void setTestName(String str) { examName = str; }
    public void setRandomiseQuestionOrder(boolean yes) {randomiseQuestionOrder = yes; }
    public void setChosenExamFiles(File[] selectedFiles) { examFiles = selectedFiles; }
    public void setOutputDirectory(File currentDirectory) { outputDirectory = currentDirectory; }
    public void setProgressFeedback(JProgressBar bar) {jpBar = bar;}
    
    // Printer methods
    public void print(String html){
        printer.println(html);
    }
    public void print(String htmlTag, String content) {
        printer.printf("<%s>%s</%s>%n", htmlTag, content, htmlTag);
    }
    public void print(String htmlTag, String tagClass, String content) {
        printer.printf("<%s class='%s'>%s</%s>", htmlTag, tagClass, content, htmlTag);
    }



   

    
}
